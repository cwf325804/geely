apply plugin: 'com.android.application'
import java.util.regex.Pattern

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.geely"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        ndk {
//            abiFilters 'armeabi'
//        }
        resConfigs "zh"
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    // 移除lint检查的error
    lintOptions {
        abortOnError false
    }
    packagingOptions{
        exclude'META-INF/DEPENDENCIES.txt'
        exclude'META-INF/LICENSE.txt'
        exclude'META-INF/NOTICE.txt'
        exclude'META-INF/NOTICE'
        exclude'META-INF/LICENSE'
        exclude'META-INF/DEPENDENCIES'
        exclude'META-INF/notice.txt'
        exclude'META-INF/license.txt'
        exclude'META-INF/dependencies.txt'
        exclude'META-INF/LGPL2.1'
    }

    buildTypes {
        def versionSuffix = "." + new Date().format("MMddHHmm", TimeZone.getDefault());
        debug{
            applicationIdSuffix "test"
            versionNameSuffix versionSuffix
            debuggable true
            shrinkResources false
            minifyEnabled false
        }
        release {
            versionNameSuffix versionSuffix
            debuggable false
            shrinkResources false
            minifyEnabled false
        }
    }


/*    android.applicationVariants.all { variant ->
        def manifestFile = file("AndroidManifest.xml")
        def pattern = Pattern.compile("versionName=\"(.+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionName = matcher.group(1)
        pattern = Pattern.compile("versionCode=\"(.+)\"")
        matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = matcher.group(1)

        if (variant.buildType.zipAlignEnabled) {
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = "apk/" + applicationId + "-V" + versionName + "-" + versionCode + "-" + variant.name + "-" + buildTime() + ".apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        } else {
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = "apk/" + applicationId + "-V" + versionName + "-" + versionCode + "-" + variant.name + "-" + buildTime() + "-unaligned.apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }*/
    productFlavors {
        commonsoon {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "commonsoon"]
        }
        zhushou91 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "zhushou91"]
        }
    }

    android.applicationVariants.all { variant ->
        def assembleTask = tasks.findByName("assemble${variant.name.capitalize()}")
        assembleTask.doLast {
            def packageTask = tasks.findByName("package${variant.name.capitalize()}")

            //def time = new Date().format("yyyy-MM-dd_HH:mm:ss", TimeZone.getDefault())
            def saveDir = file("${variant.outputs[0].splitFolder.path}${File.separator}history${File.separator}${variant.versionCode}${File.separator}${variant.versionName}${File.separator}${variant.name.capitalize()}")
            copy {
                from packageTask.outputFile
                into saveDir
                rename { String fileName ->
                    if (fileName.endsWith(".apk")) {
                        return "geely_${variant.versionCode}_${variant.versionName}_${variant.name.capitalize()}.apk"
                    }
                }
            }
            def proguardVariant = tasks.findByName("transformClassesAndResourcesWithProguardFor${variant.name.capitalize()}")
            if (proguardVariant && proguardVariant.enabled) {
                copy {
                    from proguardVariant.outputs
                    into saveDir
                    include("*.txt")
                }
            }
        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
    compile 'com.google.code.gson:gson:2.7'
    testCompile 'junit:junit:4.12'
}
